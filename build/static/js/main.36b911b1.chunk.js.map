{"version":3,"sources":["firebase.js","upLoadImg.js","post.js","modal.js","postForm.js","mainContent.js","topBar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","UpLoadImg","props","handleUploadSuccess","filename","setState","avatar","progress","isUploading","storage","ref","child","getDownloadURL","then","url","setUrl","state","avatarURL","accept","storageRef","onUploadStart","this","handleUploadStart","onUploadError","handleUploadError","onUploadSuccess","onProgress","handleProgress","style","backgroundColor","color","padding","borderRadius","Component","Post","onInputChange","e","target","name","value","body","bind","onSubmit","preventDefault","postsinfor","database","post","refs","push","className","type","rows","cols","placeholder","onChange","onClick","modal","transform","show","opacity","close","PostTextArea","openModalHandler","showModal","closeModalHandler","ContentBody","width","height","src","alt","TopNav","handleScroll","scroll","window","scrollY","componentDidMount","el","document","querySelector","top","offsetTop","offsetHeight","addEventListener","componentDidUpdate","paddingTop","href","App","items","allPosts","on","snapshot","valueArr","val","length","set","newState","item","id","itemId","remove","map","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36b911b1.chunk.js","sourcesContent":["import * as firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDsSXdMa0QXJ3rd8ePGBOcj2ZiHd3j8TTA\",\n    authDomain: \"reactblog-59d5e.firebaseapp.com\",\n    databaseURL: \"https://reactblog-59d5e.firebaseio.com\",\n    projectId: \"reactblog-59d5e\",\n    storageBucket: \"reactblog-59d5e.appspot.com\",\n    messagingSenderId: \"412553292196\",\n    appId: \"1:412553292196:web:4a4cb6e6ac7f78b3bc3931\",\n    measurementId: \"G-YGJLJFC2M1\"\n  };\n\n firebase.initializeApp(firebaseConfig); \n  \n// const database = firebase.database().ref('/posts');\n  export default firebase;","import React , {Component} from 'react';\nimport firebase from './firebase';\n// import FileUploader from \"react-firebase-file-uploader\";\nimport CustomUploadButton from 'react-firebase-file-uploader/lib/CustomUploadButton';\n\nclass UpLoadImg extends Component{\n    constructor(props){\n        super();\n        this.state = {\n            isUploading: false,\n            progress: 0,\n            avatarURL: \"\"\n          };\n          this.setUrl =(url)=>{\n              this.setState({ avatarURL: url });\n              props.setUrl(url);\n          };\n    }\n      handleUploadSuccess = filename => {\n        this.setState({ avatar: filename, progress: 100, isUploading: false });\n        firebase\n          .storage()\n          .ref(\"images\")\n          .child(filename)\n          .getDownloadURL()\n          .then(url =>this.setUrl(url)\n           );\n      };\n     \n      render() {\n        return (\n<CustomUploadButton\n    accept=\"image/*\"\n    storageRef={firebase.storage().ref('images')}\n    onUploadStart={this.handleUploadStart}\n    onUploadError={this.handleUploadError}\n    onUploadSuccess={this.handleUploadSuccess}\n    onProgress={this.handleProgress}\n    style={{\n      backgroundColor: '#4CAF50',\n      color: 'white',\n      padding: 6, borderRadius: 4\n    }}\n  >\n    Picture \n  </CustomUploadButton>\n        );\n      }\n}\n\nexport default UpLoadImg;","import React , {Component} from 'react';\nimport firebase from './firebase';\nimport UpLoadImg from './upLoadImg';\n\nclass Post extends Component {\n    constructor(){\n      super();\n      this.state = {\n        body: '',\n        url: ''\n      };\n      this.onInputChange = this.onInputChange.bind(this);\n      this.onSubmit = this.onSubmit.bind(this);\n    }\n    setUrl(url){\n      this.setState({'url': url});\n    }\n   onInputChange = (e) => {\n    this.setState({\n      [e.target.name]:e.target.value\n    });\n   }\n   onSubmit(e){\n    e.preventDefault();\n    const postsinfor = firebase.database().ref('posts');\n    const post = {\n      body: this.state.body,\n      url: this.state.url\n    }\n    /// clean textarea\n    this.refs.body.value = '';\n    postsinfor.push(post);\n    \n   }\n\n    render(){\n      return(\n        <div className=\"container\">\n        <form className=\"form\">\n        <textarea\n         className =\"modal-body-textarea\" type=\"text\" rows =\"15\" cols=\"85\" name=\"body\" placeholder=\"Whats in you mind??\"\n          onChange={this.onInputChange} ref=\"body\"\n          />\n          <div className=\"button-group\">\n            <UpLoadImg url={this.state.url} setUrl={this.setUrl.bind(this)}></UpLoadImg>\n            <button className = \"postButton\" onClick={this.onSubmit}>Post</button>\n            </div>\n        </form>\n      </div>\n      )\n    }\n   }\n  \n  export default Post;\n  ","import React, { Component } from 'react';\nimport './modal.css';\nimport Post from './post';\n\nclass modal extends Component {\n    constructor(props){\n        super();\n        this.state={};\n    }\n    render(){\n        return (\n            <div className=\"modal-wrapper\"\n                style={{\n                    transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                    opacity: this.props.show ? '1' : '0'\n                }}>\n                    <div className=\"modal-header\">\n                    <h3>Whats Up Man?</h3>\n                    <span className=\"close-modal-btn\" onClick={this.props.close}>Ã—</span>\n                </div>\n                <div className=\"modal-body\">\n                    <Post state = {this.props.show}/>\n                </div>\n                    </div>\n    )\n    }\n}\n\nexport default modal;\n","import React, { Component } from \"react\";\n// import ReactDOM from \"react-dom\";\nimport Modal from './modal'\nimport './postForm.css';\n\nclass PostTextArea extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showModal: false\n        }\n    }\n\n    openModalHandler = () => {\n        this.setState({\n            showModal: true\n        });\n    }\n\n    closeModalHandler = () => {\n        this.setState({\n            showModal: false\n        });\n    }\n      render(){\n          return(<div className=\"postDiv\">\n                  <input  className=\"post\" type=\"text\" placeholder=\"post..\" onClick={this.openModalHandler}/>\n                  <Modal\n                    className=\"modal\"\n                    show={this.state.showModal}\n                    close={this.closeModalHandler}>\n                </Modal>\n          </div>\n          )\n      };\n}\nexport default PostTextArea;","import React , {Component} from 'react';\n\nclass ContentBody extends Component {\n    render() {\n      return (\n      <div className=\"card\">\n          <p></p>\n          <div className=\"contentImg\">\n          <img\n          style={{width:'100%',height:'auto'}}\n          src={this.props.value.url} alt=\"new\"/>\n          </div>\n          <p>{this.props.value.body}</p>\n          <div className=\"actions\">\n          <i className=\"fa fa-thumbs-up\"></i>\n          <i className=\"fas fa-comments\"></i>\n          </div>\n          </div>\n          \n      );\n    }\n  }\n  export default ContentBody;","import React , {Component} from 'react';\nclass TopNav extends Component {\n    constructor(props) {\n          super(props);\n          this.state = {};\n      }\n  \n      handleScroll=()=> {\n          this.setState({scroll: window.scrollY});\n      }\n    componentDidMount=()=> {\n          const el = document.querySelector('nav');\n          this.setState({top: el.offsetTop, height: el.offsetHeight});\n          window.addEventListener('scroll', this.handleScroll);\n      }\n    \n    componentDidUpdate=()=> {\n          this.state.scroll > this.state.top ? \n              document.body.style.paddingTop = `${this.state.height}px` :\n              document.body.style.paddingTop = 0;\n      }\n    \n    render() {\n      return (\n        <nav className={this.state.scroll > this.state.top ? \"fixed-nav\" : \"\"}>\n            <div className=\"topnav\">\n                <a className=\"active\" href=\"#home\"><i className=\"fas fa-award\"></i></a>\n                <input type=\"text\" placeholder=\"Search..\"></input>\n                </div>\n        </nav>\n      );\n    }\n  }\n  export default TopNav;","import React , {Component} from 'react';\nimport firebase from './firebase';\nimport './blog.css';\nimport PostTextArea from './postForm';\nimport ContentBody from './mainContent';\nimport TopNav from './topBar';\n\nclass App extends Component{\n    constructor(props){\n        super();\n        this.state = {\n          url:'',\n          body: '',\n          items: []\n        };\n      }\n      componentDidMount() {\n        const allPosts = firebase.database().ref('posts'); \n        allPosts.on('value', (snapshot)=>{\n            let valueArr = snapshot.val();\n            if(valueArr.length === null){\n                allPosts.set({\n                    url:'https://firebasestorage.googleapis.com/v0/b/reactblog-59d5e.appspot.com/o/images%2FScreenshot%202019-04-24%20at%2021.57.48.png?alt=media&token=c6066c05-5585-46ea-aa5c-04636d16ad43',\n                    body:'Please Write Somgthing!'\n                });\n            }\n            let newState = [];\n            for(let item in valueArr){\n                newState.push({\n                    id:item,\n                    url:valueArr[item].url,\n                    body: valueArr[item].body\n                 });\n            }\n            this.setState({items: newState});\n            \n        });\n        \n      }\n      removeItem(itemId) {\n        const allPosts = firebase.database().ref(`/posts/${itemId}`);\n        allPosts.remove();\n      }\n      \n    render(){\n      return(\n        <div className=\"container\">\n            <div className = \"header\">\n                <TopNav></TopNav>\n                <PostTextArea></PostTextArea>\n            </div>\n            <div className =\"mainContent\">\n                <div className=\"row\">\n                    <div className=\"leftcolumn\">\n                    {this.state.items.map((item) => {\n                        return (\n                            <ContentBody key={item.id} value={{'body':item.body, 'url':item.url}}/>\n                            )\n                            })}\n                    </div>\n                    <div className=\"rightcolumn\">\n                        <div className=\"card\">\n                            <h2>HotTopic</h2>\n                            <div className=\"HotTopicImg\">\n                                <img  src={process.env.PUBLIC_URL + '/wordCloud.png'}  alt=\"Smiley face\"/>\n                                </div>\n                            <p>What is people is talk about!</p>\n                        </div>\n                        <div className = 'card'>\n                            <h3>Popular Post</h3>\n                            <div className=\"PopularPostImg\">\n                            <img  src={process.env.PUBLIC_URL + '/helsinki.jpg'}  alt=\"Smiley face\"/>\n                            <br></br>\n                            </div>\n                            <div className=\"PopularPostImg\">\n                                <img src={process.env.PUBLIC_URL + '/helsinkiTori.jpg'}  alt=\"Smiley face\"/>\n                                </div><br></br>\n                            <div className=\"PopularPostImg\">\n                                <img src={process.env.PUBLIC_URL + '/helsinkiWinter.jpg'}  alt=\"Smiley face\"/>\n                                </div>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Follow Me</h3>\n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"footer\">\n                <p>Powered by: Yunlong Liu</p>\n                <p>Contact information: <a href=\"yunlong.a.liu@gmail.com\">yunlong.a.liu@gmail.com</a>.</p></div>\n            </div>\n      );\n    }\n  };\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}